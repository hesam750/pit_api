generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://root:اثسشئ1375@@localhost:3306/pitstop_db"
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String
  image         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  resetToken    String?   @unique
  resetTokenExpiry DateTime?
  twoFactorEnabled Boolean   @default(false)
  twoFactorSecret String?
  backupCodes       String?   // JSON string of backup codes
  logs              Log[]
  wallet            Wallet?
  bookings      Booking[]
  chats         Chat[]
  payments      Payment[]
  reviews       Review[]
  subscriptions     Subscription[]
}

model Booking {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  serviceType String
  date        DateTime
  status      BookingStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  payment     Payment?
  review      Review?
}

model Chat {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  message   String
  createdAt DateTime @default(now())
}

model Payment {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  bookingId       String   @unique
  booking         Booking  @relation(fields: [bookingId], references: [id])
  amount          Float
  status          PaymentStatus
  stripeSessionId String   @unique
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Service {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  duration    Int      // duration in minutes
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  bookings    Booking[]
  reviews     Review[]
}

model Review {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  bookingId   String   @unique
  booking     Booking  @relation(fields: [bookingId], references: [id])
  serviceId   String
  service     Service  @relation(fields: [serviceId], references: [id])
  rating      Int      @db.TinyInt
  comment     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Wallet {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  balance     Float    @default(0)
  currency    String   @default("IRR")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  transactions WalletTransaction[]
}

model WalletTransaction {
  id          String   @id @default(cuid())
  walletId    String
  wallet      Wallet   @relation(fields: [walletId], references: [id])
  amount      Float
  type        TransactionType
  status      TransactionStatus @default(PENDING)
  description String?
  referenceId String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Subscription {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  planId          String
  plan            Plan     @relation(fields: [planId], references: [id])
  status          SubscriptionStatus @default(ACTIVE)
  startDate       DateTime
  endDate         DateTime
  autoRenew       Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  payments        SubscriptionPayment[]
}

model Plan {
  id              String   @id @default(cuid())
  name            String
  description     String?
  price           Float
  duration        Int      // duration in months
  features        String   // JSON string of features
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  subscriptions   Subscription[]
}

model SubscriptionPayment {
  id              String   @id @default(cuid())
  subscriptionId  String
  subscription    Subscription @relation(fields: [subscriptionId], references: [id])
  amount          Float
  status          PaymentStatus
  stripeSessionId String   @unique
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum TransactionType {
  DEPOSIT
  WITHDRAW
  PAYMENT
  REFUND
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  SUSPENDED
} 